# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _mforms
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _mforms.PySwigIterator_value(*args)
    def incr(*args): return _mforms.PySwigIterator_incr(*args)
    def decr(*args): return _mforms.PySwigIterator_decr(*args)
    def distance(*args): return _mforms.PySwigIterator_distance(*args)
    def equal(*args): return _mforms.PySwigIterator_equal(*args)
    def copy(*args): return _mforms.PySwigIterator_copy(*args)
    def next(*args): return _mforms.PySwigIterator_next(*args)
    def previous(*args): return _mforms.PySwigIterator_previous(*args)
    def advance(*args): return _mforms.PySwigIterator_advance(*args)
    def __eq__(*args): return _mforms.PySwigIterator___eq__(*args)
    def __ne__(*args): return _mforms.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _mforms.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _mforms.PySwigIterator___isub__(*args)
    def __add__(*args): return _mforms.PySwigIterator___add__(*args)
    def __sub__(*args): return _mforms.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _mforms.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class doubleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _mforms.doubleList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _mforms.doubleList___nonzero__(*args)
    def __len__(*args): return _mforms.doubleList___len__(*args)
    def pop(*args): return _mforms.doubleList_pop(*args)
    def __getslice__(*args): return _mforms.doubleList___getslice__(*args)
    def __setslice__(*args): return _mforms.doubleList___setslice__(*args)
    def __delslice__(*args): return _mforms.doubleList___delslice__(*args)
    def __delitem__(*args): return _mforms.doubleList___delitem__(*args)
    def __getitem__(*args): return _mforms.doubleList___getitem__(*args)
    def __setitem__(*args): return _mforms.doubleList___setitem__(*args)
    def append(*args): return _mforms.doubleList_append(*args)
    def empty(*args): return _mforms.doubleList_empty(*args)
    def size(*args): return _mforms.doubleList_size(*args)
    def clear(*args): return _mforms.doubleList_clear(*args)
    def swap(*args): return _mforms.doubleList_swap(*args)
    def get_allocator(*args): return _mforms.doubleList_get_allocator(*args)
    def begin(*args): return _mforms.doubleList_begin(*args)
    def end(*args): return _mforms.doubleList_end(*args)
    def rbegin(*args): return _mforms.doubleList_rbegin(*args)
    def rend(*args): return _mforms.doubleList_rend(*args)
    def pop_back(*args): return _mforms.doubleList_pop_back(*args)
    def erase(*args): return _mforms.doubleList_erase(*args)
    def __init__(self, *args): 
        this = _mforms.new_doubleList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _mforms.doubleList_push_back(*args)
    def front(*args): return _mforms.doubleList_front(*args)
    def back(*args): return _mforms.doubleList_back(*args)
    def assign(*args): return _mforms.doubleList_assign(*args)
    def resize(*args): return _mforms.doubleList_resize(*args)
    def insert(*args): return _mforms.doubleList_insert(*args)
    def pop_front(*args): return _mforms.doubleList_pop_front(*args)
    def push_front(*args): return _mforms.doubleList_push_front(*args)
    def reverse(*args): return _mforms.doubleList_reverse(*args)
    __swig_destroy__ = _mforms.delete_doubleList
    __del__ = lambda self : None;
doubleList_swigregister = _mforms.doubleList_swigregister
doubleList_swigregister(doubleList)

def newLabel(text=""):
    c = Label(text)
    c.set_managed()
    return c

def newButton(*args):
    c = Button(*args)
    c.set_managed()
    return c

def newCheckBox(*args):
    c = CheckBox(*args)
    c.set_managed()
    return c

def newTextEntry(*args):
    c = TextEntry(*args)
    c.set_managed()
    return c

def newTextBox(*args):
    c = TextBox(*args)
    c.set_managed()
    return c

def newSelector(*args):
    c = Selector(*args)
    c.set_managed()
    return c

def newListBox(*args):
    c = ListBox(*args)
    c.set_managed()
    return c

def newTabView(*args):
    c = TabView(*args)
    c.set_managed()
    return c

def newBox(*args):
    c = Box(*args)
    c.set_managed()
    return c

def newPanel(*args):
    c = Panel(*args)
    c.set_managed()
    return c

def newFileChooser(*args):
    c = FileChooser(*args)
    c.set_managed()
    return c

def newRadioButton(*args):
    c = RadioButton(*args)
    c.set_managed()
    return c

def newImageBox(*args):
    c = ImageBox(*args)
    c.set_managed()
    return c

def newProgressBar(*args):
    c = ProgressBar(*args)
    c.set_managed()
    return c

def newTable(*args):
    c = Table(*args)
    c.set_managed()
    return c

def newScrollPanel(*args):
    c = ScrollPanel(*args)
    c.set_managed()
    return c

def newTreeView(*args):
    c = TreeView(*args)
    c.set_managed()
    return c

def newAppView(*args):
    c = AppView(*args)
    return c

def newDrawBox(*args):
    c = DrawBox(*args)
    c.set_managed()
    return c

def newTabSwitcher(*args):
    c = TabSwitcher(*args)
    c.set_managed()
    return c

def newSectionBox(*args):
    c = SectionBox(*args)
    c.set_managed()
    return c

def newWidgetSeparator(*args):
    c = WidgetSeparator(*args)
    c.set_managed()
    return c

def newWidgetContainer(*args):
    c = WidgetContainer(*args)
    c.set_managed()
    return c

def newHeartbeatWidget(*args):
    c = HeartbeatWidget(*args)
    c.set_managed()
    return c

def newServerInfoWidget(*args):
    c = ServerInfoWidget(*args)
    c.set_managed()
    return c

def newBarGraphWidget(*args):
    c = BarGraphWidget(*args)
    c.set_managed()
    return c

def newLineDiagramWidget(*args):
    c = LineDiagramWidget(*args)
    c.set_managed()
    return c

def newWebBrowser(*args):
    c = WebBrowser(*args)
    c.set_managed()
    return c

def newPopup(*args):
    c = Popup(*args)
    c.set_managed()
    return c

def newTaskSidebar(*args):
    c = TaskSidebar.create(*args)
    c.set_managed()
    return c

def newSimpleGrid(*args):
    c = SimpleGrid(*args)
    c.set_managed()
    return c

def newHyperText(*args):
    c = HyperText(*args)
    c.set_managed()
    return c


class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def retain(*args): return _mforms.Object_retain(*args)
    def release(*args): return _mforms.Object_release(*args)
    def set_managed(*args): return _mforms.Object_set_managed(*args)
    def is_managed(*args): return _mforms.Object_is_managed(*args)
    def retain_count(*args): return _mforms.Object_retain_count(*args)
    def set_destroying(*args): return _mforms.Object_set_destroying(*args)
    def is_destroying(*args): return _mforms.Object_is_destroying(*args)
    def __init__(self, *args): 
        this = _mforms.new_Object(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _mforms.Object_swigregister
Object_swigregister(Object)

ResizeNone = _mforms.ResizeNone
ResizeVertical = _mforms.ResizeVertical
ResizeHorizontal = _mforms.ResizeHorizontal
ResizeBoth = _mforms.ResizeBoth
LayoutNone = _mforms.LayoutNone
LayoutTile = _mforms.LayoutTile
LayoutCenter = _mforms.LayoutCenter
LayoutStretch = _mforms.LayoutStretch
LayoutZoom = _mforms.LayoutZoom
MouseButtonLeft = _mforms.MouseButtonLeft
MouseButtonRight = _mforms.MouseButtonRight
MouseButtonMiddle = _mforms.MouseButtonMiddle
MouseButtonNone = _mforms.MouseButtonNone
class View(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_View
    __del__ = lambda self : None;
    def set_managed(*args): return _mforms.View_set_managed(*args)
    def find_subview(*args): return _mforms.View_find_subview(*args)
    def contains_subview(*args): return _mforms.View_contains_subview(*args)
    def get_resize_mode(*args): return _mforms.View_get_resize_mode(*args)
    def set_resize_mode(*args): return _mforms.View_set_resize_mode(*args)
    def signal_resized(*args): return _mforms.View_signal_resized(*args)
    def set_name(*args): return _mforms.View_set_name(*args)
    def set_tooltip(*args): return _mforms.View_set_tooltip(*args)
    def set_font(*args): return _mforms.View_set_font(*args)
    def get_name(*args): return _mforms.View_get_name(*args)
    def set_parent(*args): return _mforms.View_set_parent(*args)
    def get_parent(*args): return _mforms.View_get_parent(*args)
    def get_parent_form(*args): return _mforms.View_get_parent_form(*args)
    def get_width(*args): return _mforms.View_get_width(*args)
    def get_height(*args): return _mforms.View_get_height(*args)
    def get_preferred_width(*args): return _mforms.View_get_preferred_width(*args)
    def get_preferred_height(*args): return _mforms.View_get_preferred_height(*args)
    def get_x(*args): return _mforms.View_get_x(*args)
    def get_y(*args): return _mforms.View_get_y(*args)
    def set_position(*args): return _mforms.View_set_position(*args)
    def set_size(*args): return _mforms.View_set_size(*args)
    def client_to_screen(*args): return _mforms.View_client_to_screen(*args)
    def show(*args): return _mforms.View_show(*args)
    def is_shown(*args): return _mforms.View_is_shown(*args)
    def set_enabled(*args): return _mforms.View_set_enabled(*args)
    def is_enabled(*args): return _mforms.View_is_enabled(*args)
    def set_needs_repaint(*args): return _mforms.View_set_needs_repaint(*args)
    def needs_resize(*args): return _mforms.View_needs_resize(*args)
    def relayout(*args): return _mforms.View_relayout(*args)
    def set_layout_dirty(*args): return _mforms.View_set_layout_dirty(*args)
    def is_layout_dirty(*args): return _mforms.View_is_layout_dirty(*args)
    def on_resize(*args): return _mforms.View_on_resize(*args)
    def suspend_layout(*args): return _mforms.View_suspend_layout(*args)
    def resume_layout(*args): return _mforms.View_resume_layout(*args)
    def set_front_color(*args): return _mforms.View_set_front_color(*args)
    def get_front_color(*args): return _mforms.View_get_front_color(*args)
    def set_back_color(*args): return _mforms.View_set_back_color(*args)
    def get_back_color(*args): return _mforms.View_get_back_color(*args)
    def set_back_image(*args): return _mforms.View_set_back_image(*args)
    def show_retain_counts(*args): return _mforms.View_show_retain_counts(*args)
    def get_string_value(*args): return _mforms.View_get_string_value(*args)
    def get_int_value(*args): return _mforms.View_get_int_value(*args)
    def get_bool_value(*args): return _mforms.View_get_bool_value(*args)
    def flush_events(*args): return _mforms.View_flush_events(*args)
View_swigregister = _mforms.View_swigregister
View_swigregister(View)

class Container(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Container(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_padding(*args): return _mforms.Container_set_padding(*args)
    __swig_destroy__ = _mforms.delete_Container
    __del__ = lambda self : None;
Container_swigregister = _mforms.Container_swigregister
Container_swigregister(Container)

TOP_FORM_PADDING = _mforms.TOP_FORM_PADDING
FormNone = _mforms.FormNone
FormSingleFrame = _mforms.FormSingleFrame
FormDialogFrame = _mforms.FormDialogFrame
FormResizable = _mforms.FormResizable
FormMinimizable = _mforms.FormMinimizable
FormHideOnClose = _mforms.FormHideOnClose
FormStayOnTop = _mforms.FormStayOnTop
FormToolWindow = _mforms.FormToolWindow
class Form(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Form, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Form, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Form(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Form
    __del__ = lambda self : None;
    __swig_getmethods__["main_form"] = lambda x: _mforms.Form_main_form
    if _newclass:main_form = staticmethod(_mforms.Form_main_form)
    def set_content(*args): return _mforms.Form_set_content(*args)
    def set_title(*args): return _mforms.Form_set_title(*args)
    def show_modal(*args): return _mforms.Form_show_modal(*args)
    def run_modal(*args): return _mforms.Form_run_modal(*args)
    def end_modal(*args): return _mforms.Form_end_modal(*args)
    def close(*args): return _mforms.Form_close(*args)
    def center(*args): return _mforms.Form_center(*args)
    def flush_events(*args): return _mforms.Form_flush_events(*args)
    def set_release_on_close(*args): return _mforms.Form_set_release_on_close(*args)
    def was_closed(*args): return _mforms.Form_was_closed(*args)
    def needs_resize(*args): return _mforms.Form_needs_resize(*args)
    def add_closed_callback(*args): return _mforms.Form_add_closed_callback(*args)
    def call_closed_callback(*args): return _mforms.Form_call_closed_callback(*args)
Form_swigregister = _mforms.Form_swigregister
Form_swigregister(Form)
Form_main_form = _mforms.Form_main_form

PushButton = _mforms.PushButton
ToolButton = _mforms.ToolButton
AdminActionButton = _mforms.AdminActionButton
class Button(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Button, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Button, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Button(*args)
        try: self.this.append(this)
        except: self.this = this
    def enable_internal_padding(*args): return _mforms.Button_enable_internal_padding(*args)
    def set_text(*args): return _mforms.Button_set_text(*args)
    def set_icon(*args): return _mforms.Button_set_icon(*args)
    def add_clicked_callback(*args): return _mforms.Button_add_clicked_callback(*args)
    def call_clicked_callback(*args): return _mforms.Button_call_clicked_callback(*args)
    __swig_destroy__ = _mforms.delete_Button
    __del__ = lambda self : None;
Button_swigregister = _mforms.Button_swigregister
Button_swigregister(Button)

class CheckBox(Button):
    __swig_setmethods__ = {}
    for _s in [Button]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Button]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_CheckBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_active(*args): return _mforms.CheckBox_set_active(*args)
    def get_active(*args): return _mforms.CheckBox_get_active(*args)
    def get_int_value(*args): return _mforms.CheckBox_get_int_value(*args)
    def get_bool_value(*args): return _mforms.CheckBox_get_bool_value(*args)
    def get_string_value(*args): return _mforms.CheckBox_get_string_value(*args)
    __swig_destroy__ = _mforms.delete_CheckBox
    __del__ = lambda self : None;
CheckBox_swigregister = _mforms.CheckBox_swigregister
CheckBox_swigregister(CheckBox)

NormalEntry = _mforms.NormalEntry
PasswordEntry = _mforms.PasswordEntry
SearchEntry = _mforms.SearchEntry
SmallSearchEntry = _mforms.SmallSearchEntry
EntryActivate = _mforms.EntryActivate
EntryKeyUp = _mforms.EntryKeyUp
EntryKeyDown = _mforms.EntryKeyDown
EntryCKeyUp = _mforms.EntryCKeyUp
EntryCKeyDown = _mforms.EntryCKeyDown
class TextEntry(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_max_length(*args): return _mforms.TextEntry_set_max_length(*args)
    def set_value(*args): return _mforms.TextEntry_set_value(*args)
    def get_string_value(*args): return _mforms.TextEntry_get_string_value(*args)
    def set_read_only(*args): return _mforms.TextEntry_set_read_only(*args)
    def add_changed_callback(*args): return _mforms.TextEntry_add_changed_callback(*args)
    def call_changed_callback(*args): return _mforms.TextEntry_call_changed_callback(*args)
    __swig_destroy__ = _mforms.delete_TextEntry
    __del__ = lambda self : None;
TextEntry_swigregister = _mforms.TextEntry_swigregister
TextEntry_swigregister(TextEntry)

NoScrollBar = _mforms.NoScrollBar
HorizontalScrollBar = _mforms.HorizontalScrollBar
VerticalScrollBar = _mforms.VerticalScrollBar
BothScrollBars = _mforms.BothScrollBars
SmallScrollBars = _mforms.SmallScrollBars
KeyNone = _mforms.KeyNone
KeyChar = _mforms.KeyChar
KeyModifierOnly = _mforms.KeyModifierOnly
KeyEnter = _mforms.KeyEnter
KeyReturn = _mforms.KeyReturn
KeyHome = _mforms.KeyHome
KeyEnd = _mforms.KeyEnd
KeyPrevious = _mforms.KeyPrevious
KeyNext = _mforms.KeyNext
KeyUnkown = _mforms.KeyUnkown
class TextBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_bordered(*args): return _mforms.TextBox_set_bordered(*args)
    def set_monospaced(*args): return _mforms.TextBox_set_monospaced(*args)
    def set_read_only(*args): return _mforms.TextBox_set_read_only(*args)
    def set_value(*args): return _mforms.TextBox_set_value(*args)
    def get_string_value(*args): return _mforms.TextBox_get_string_value(*args)
    def get_selected_range(*args): return _mforms.TextBox_get_selected_range(*args)
    def append_text_and_scroll(*args): return _mforms.TextBox_append_text_and_scroll(*args)
    def append_text(*args): return _mforms.TextBox_append_text(*args)
    def append_text_with_encoding_and_scroll(*args): return _mforms.TextBox_append_text_with_encoding_and_scroll(*args)
    def append_text_with_encoding(*args): return _mforms.TextBox_append_text_with_encoding(*args)
    def set_padding(*args): return _mforms.TextBox_set_padding(*args)
    def clear(*args): return _mforms.TextBox_clear(*args)
    def add_changed_callback(*args): return _mforms.TextBox_add_changed_callback(*args)
    def call_changed_callback(*args): return _mforms.TextBox_call_changed_callback(*args)
    __swig_destroy__ = _mforms.delete_TextBox
    __del__ = lambda self : None;
TextBox_swigregister = _mforms.TextBox_swigregister
TextBox_swigregister(TextBox)

BottomLeft = _mforms.BottomLeft
BottomCenter = _mforms.BottomCenter
BottomRight = _mforms.BottomRight
MiddleLeft = _mforms.MiddleLeft
MiddleCenter = _mforms.MiddleCenter
MiddleRight = _mforms.MiddleRight
TopLeft = _mforms.TopLeft
TopCenter = _mforms.TopCenter
TopRight = _mforms.TopRight
WizardLabelAlignment = _mforms.WizardLabelAlignment
NormalStyle = _mforms.NormalStyle
BoldStyle = _mforms.BoldStyle
SmallBoldStyle = _mforms.SmallBoldStyle
BigStyle = _mforms.BigStyle
BigBoldStyle = _mforms.BigBoldStyle
SmallStyle = _mforms.SmallStyle
VerySmallStyle = _mforms.VerySmallStyle
InfoCaptionStyle = _mforms.InfoCaptionStyle
BoldInfoCaptionStyle = _mforms.BoldInfoCaptionStyle
WizardHeadingStyle = _mforms.WizardHeadingStyle
SmallHelpTextStyle = _mforms.SmallHelpTextStyle
class Label(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Label(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_wrap_text(*args): return _mforms.Label_set_wrap_text(*args)
    def set_text_align(*args): return _mforms.Label_set_text_align(*args)
    def set_text(*args): return _mforms.Label_set_text(*args)
    def set_style(*args): return _mforms.Label_set_style(*args)
    def set_color(*args): return _mforms.Label_set_color(*args)
    __swig_destroy__ = _mforms.delete_Label
    __del__ = lambda self : None;
Label_swigregister = _mforms.Label_swigregister
Label_swigregister(Label)

SelectorCombobox = _mforms.SelectorCombobox
SelectorPopup = _mforms.SelectorPopup
class Selector(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selector, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Selector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Selector(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _mforms.Selector_clear(*args)
    def add_item(*args): return _mforms.Selector_add_item(*args)
    def add_items(*args): return _mforms.Selector_add_items(*args)
    def get_item_title(*args): return _mforms.Selector_get_item_title(*args)
    def set_selected(*args): return _mforms.Selector_set_selected(*args)
    def index_of_item_with_title(*args): return _mforms.Selector_index_of_item_with_title(*args)
    def get_string_value(*args): return _mforms.Selector_get_string_value(*args)
    def get_selected_index(*args): return _mforms.Selector_get_selected_index(*args)
    def set_value(*args): return _mforms.Selector_set_value(*args)
    def get_item_count(*args): return _mforms.Selector_get_item_count(*args)
    def add_changed_callback(*args): return _mforms.Selector_add_changed_callback(*args)
    def call_changed_callback(*args): return _mforms.Selector_call_changed_callback(*args)
    __swig_destroy__ = _mforms.delete_Selector
    __del__ = lambda self : None;
Selector_swigregister = _mforms.Selector_swigregister
Selector_swigregister(Selector)

class ListBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ListBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _mforms.ListBox_clear(*args)
    def set_heading(*args): return _mforms.ListBox_set_heading(*args)
    def add_item(*args): return _mforms.ListBox_add_item(*args)
    def add_items(*args): return _mforms.ListBox_add_items(*args)
    def set_selected(*args): return _mforms.ListBox_set_selected(*args)
    def get_string_value(*args): return _mforms.ListBox_get_string_value(*args)
    def get_selected_index(*args): return _mforms.ListBox_get_selected_index(*args)
    def get_selected_indices(*args): return _mforms.ListBox_get_selected_indices(*args)
    def add_changed_callback(*args): return _mforms.ListBox_add_changed_callback(*args)
    def call_changed_callback(*args): return _mforms.ListBox_call_changed_callback(*args)
    __swig_destroy__ = _mforms.delete_ListBox
    __del__ = lambda self : None;
ListBox_swigregister = _mforms.ListBox_swigregister
ListBox_swigregister(ListBox)

TabViewSystemStandard = _mforms.TabViewSystemStandard
TabViewTabless = _mforms.TabViewTabless
TabViewMainClosable = _mforms.TabViewMainClosable
TabViewDocument = _mforms.TabViewDocument
TabViewDocumentClosable = _mforms.TabViewDocumentClosable
TabViewPalette = _mforms.TabViewPalette
TabViewSelectorSecondary = _mforms.TabViewSelectorSecondary
class TabView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TabView(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_active_tab(*args): return _mforms.TabView_set_active_tab(*args)
    def get_active_tab(*args): return _mforms.TabView_get_active_tab(*args)
    def add_page(*args): return _mforms.TabView_add_page(*args)
    def remove_page(*args): return _mforms.TabView_remove_page(*args)
    def set_tab_title(*args): return _mforms.TabView_set_tab_title(*args)
    def get_page_index(*args): return _mforms.TabView_get_page_index(*args)
    def get_page(*args): return _mforms.TabView_get_page(*args)
    def add_tab_changed_callback(*args): return _mforms.TabView_add_tab_changed_callback(*args)
    def call_tab_changed_callback(*args): return _mforms.TabView_call_tab_changed_callback(*args)
    def add_tab_closed_callback(*args): return _mforms.TabView_add_tab_closed_callback(*args)
    def call_tab_closed_callback(*args): return _mforms.TabView_call_tab_closed_callback(*args)
    __swig_destroy__ = _mforms.delete_TabView
    __del__ = lambda self : None;
TabView_swigregister = _mforms.TabView_swigregister
TabView_swigregister(TabView)

class Box(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return _mforms.Box_add(*args)
    def add_end(*args): return _mforms.Box_add_end(*args)
    def remove(*args): return _mforms.Box_remove(*args)
    def set_homogeneous(*args): return _mforms.Box_set_homogeneous(*args)
    def set_spacing(*args): return _mforms.Box_set_spacing(*args)
    def is_horizontal(*args): return _mforms.Box_is_horizontal(*args)
    __swig_destroy__ = _mforms.delete_Box
    __del__ = lambda self : None;
Box_swigregister = _mforms.Box_swigregister
Box_swigregister(Box)

TransparentPanel = _mforms.TransparentPanel
FilledPanel = _mforms.FilledPanel
BorderedPanel = _mforms.BorderedPanel
LineBorderPanel = _mforms.LineBorderPanel
TitledBoxPanel = _mforms.TitledBoxPanel
TitledGroupPanel = _mforms.TitledGroupPanel
CheckBoxTitlePanel = _mforms.CheckBoxTitlePanel
FilledHeaderPanel = _mforms.FilledHeaderPanel
StyledHeaderPanel = _mforms.StyledHeaderPanel
class Panel(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Panel, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Panel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Panel(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_title(*args): return _mforms.Panel_set_title(*args)
    def set_back_color(*args): return _mforms.Panel_set_back_color(*args)
    def set_active(*args): return _mforms.Panel_set_active(*args)
    def get_active(*args): return _mforms.Panel_get_active(*args)
    def add(*args): return _mforms.Panel_add(*args)
    def remove(*args): return _mforms.Panel_remove(*args)
    def add_toggled_callback(*args): return _mforms.Panel_add_toggled_callback(*args)
    def call_toggled_callback(*args): return _mforms.Panel_call_toggled_callback(*args)
    __swig_destroy__ = _mforms.delete_Panel
    __del__ = lambda self : None;
Panel_swigregister = _mforms.Panel_swigregister
Panel_swigregister(Panel)

OpenFile = _mforms.OpenFile
SaveFile = _mforms.SaveFile
OpenDirectory = _mforms.OpenDirectory
class FileChooser(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileChooser, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileChooser, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_selector_options"] = _mforms.FileChooser__selector_options_set
    __swig_getmethods__["_selector_options"] = _mforms.FileChooser__selector_options_get
    if _newclass:_selector_options = _swig_property(_mforms.FileChooser__selector_options_get, _mforms.FileChooser__selector_options_set)
    def split_extensions(*args): return _mforms.FileChooser_split_extensions(*args)
    def __init__(self, *args): 
        this = _mforms.new_FileChooser(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_title(*args): return _mforms.FileChooser_set_title(*args)
    def run_modal(*args): return _mforms.FileChooser_run_modal(*args)
    def set_directory(*args): return _mforms.FileChooser_set_directory(*args)
    def set_path(*args): return _mforms.FileChooser_set_path(*args)
    def get_path(*args): return _mforms.FileChooser_get_path(*args)
    def get_directory(*args): return _mforms.FileChooser_get_directory(*args)
    def set_extensions(*args): return _mforms.FileChooser_set_extensions(*args)
    def add_selector_option(*args): return _mforms.FileChooser_add_selector_option(*args)
    def get_selector_option_value(*args): return _mforms.FileChooser_get_selector_option_value(*args)
    __swig_destroy__ = _mforms.delete_FileChooser
    __del__ = lambda self : None;
FileChooser_swigregister = _mforms.FileChooser_swigregister
FileChooser_swigregister(FileChooser)

class RadioButton(Button):
    __swig_setmethods__ = {}
    for _s in [Button]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioButton, name, value)
    __swig_getmethods__ = {}
    for _s in [Button]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadioButton, name)
    __repr__ = _swig_repr
    __swig_getmethods__["new_id"] = lambda x: _mforms.RadioButton_new_id
    if _newclass:new_id = staticmethod(_mforms.RadioButton_new_id)
    def __init__(self, *args): 
        this = _mforms.new_RadioButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def group_id(*args): return _mforms.RadioButton_group_id(*args)
    def set_active(*args): return _mforms.RadioButton_set_active(*args)
    def get_active(*args): return _mforms.RadioButton_get_active(*args)
    def add_clicked_callback(*args): return _mforms.RadioButton_add_clicked_callback(*args)
    def call_clicked_callback(*args): return _mforms.RadioButton_call_clicked_callback(*args)
    __swig_destroy__ = _mforms.delete_RadioButton
    __del__ = lambda self : None;
RadioButton_swigregister = _mforms.RadioButton_swigregister
RadioButton_swigregister(RadioButton)
RadioButton_new_id = _mforms.RadioButton_new_id

class ImageBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ImageBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_image(*args): return _mforms.ImageBox_set_image(*args)
    def set_scale_contents(*args): return _mforms.ImageBox_set_scale_contents(*args)
    def set_image_align(*args): return _mforms.ImageBox_set_image_align(*args)
    __swig_destroy__ = _mforms.delete_ImageBox
    __del__ = lambda self : None;
ImageBox_swigregister = _mforms.ImageBox_swigregister
ImageBox_swigregister(ImageBox)

class ProgressBar(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressBar, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressBar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ProgressBar(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_indeterminate(*args): return _mforms.ProgressBar_set_indeterminate(*args)
    def start(*args): return _mforms.ProgressBar_start(*args)
    def stop(*args): return _mforms.ProgressBar_stop(*args)
    def set_value(*args): return _mforms.ProgressBar_set_value(*args)
    __swig_destroy__ = _mforms.delete_ProgressBar
    __del__ = lambda self : None;
ProgressBar_swigregister = _mforms.ProgressBar_swigregister
ProgressBar_swigregister(ProgressBar)

NoFillExpandFlag = _mforms.NoFillExpandFlag
VExpandFlag = _mforms.VExpandFlag
HExpandFlag = _mforms.HExpandFlag
VFillFlag = _mforms.VFillFlag
HFillFlag = _mforms.HFillFlag
FillAndExpand = _mforms.FillAndExpand
class Table(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Table(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_row_count(*args): return _mforms.Table_set_row_count(*args)
    def set_column_count(*args): return _mforms.Table_set_column_count(*args)
    def set_row_spacing(*args): return _mforms.Table_set_row_spacing(*args)
    def set_column_spacing(*args): return _mforms.Table_set_column_spacing(*args)
    def set_homogeneous(*args): return _mforms.Table_set_homogeneous(*args)
    def add(*args): return _mforms.Table_add(*args)
    def remove(*args): return _mforms.Table_remove(*args)
    __swig_destroy__ = _mforms.delete_Table
    __del__ = lambda self : None;
Table_swigregister = _mforms.Table_swigregister
Table_swigregister(Table)

ScrollPanelNoFlags = _mforms.ScrollPanelNoFlags
ScrollPanelBordered = _mforms.ScrollPanelBordered
ScrollPanelDrawBackground = _mforms.ScrollPanelDrawBackground
class ScrollPanel(Container):
    __swig_setmethods__ = {}
    for _s in [Container]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScrollPanel, name, value)
    __swig_getmethods__ = {}
    for _s in [Container]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScrollPanel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ScrollPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_visible_scrollers(*args): return _mforms.ScrollPanel_set_visible_scrollers(*args)
    def set_autohide_scrollers(*args): return _mforms.ScrollPanel_set_autohide_scrollers(*args)
    def add(*args): return _mforms.ScrollPanel_add(*args)
    def remove(*args): return _mforms.ScrollPanel_remove(*args)
    def scroll_to_view(*args): return _mforms.ScrollPanel_scroll_to_view(*args)
    __swig_destroy__ = _mforms.delete_ScrollPanel
    __del__ = lambda self : None;
ScrollPanel_swigregister = _mforms.ScrollPanel_swigregister
ScrollPanel_swigregister(ScrollPanel)

StringColumnType = _mforms.StringColumnType
IntegerColumnType = _mforms.IntegerColumnType
LongIntegerColumnType = _mforms.LongIntegerColumnType
CheckColumnType = _mforms.CheckColumnType
IconColumnType = _mforms.IconColumnType
TreeDefault = _mforms.TreeDefault
TreeNoColumns = _mforms.TreeNoColumns
TreeAllowReorderRows = _mforms.TreeAllowReorderRows
TreeShowColumnLines = _mforms.TreeShowColumnLines
TreeShowRowLines = _mforms.TreeShowRowLines
TreeNoBorder = _mforms.TreeNoBorder
TreeSidebar = _mforms.TreeSidebar
TreeNoHeader = _mforms.TreeNoHeader
TreeShowHeader = _mforms.TreeShowHeader
class TreeView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TreeView(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_column(*args): return _mforms.TreeView_add_column(*args)
    def end_columns(*args): return _mforms.TreeView_end_columns(*args)
    def clear_rows(*args): return _mforms.TreeView_clear_rows(*args)
    def delete_row(*args): return _mforms.TreeView_delete_row(*args)
    def add_row(*args): return _mforms.TreeView_add_row(*args)
    def get_selected(*args): return _mforms.TreeView_get_selected(*args)
    def set_selected(*args): return _mforms.TreeView_set_selected(*args)
    def set_row_height(*args): return _mforms.TreeView_set_row_height(*args)
    def set_allow_sorting(*args): return _mforms.TreeView_set_allow_sorting(*args)
    def count(*args): return _mforms.TreeView_count(*args)
    def get_row_tag(*args): return _mforms.TreeView_get_row_tag(*args)
    def set_row_tag(*args): return _mforms.TreeView_set_row_tag(*args)
    def set_string(*args): return _mforms.TreeView_set_string(*args)
    def set_int(*args): return _mforms.TreeView_set_int(*args)
    def set_long(*args): return _mforms.TreeView_set_long(*args)
    def set_bool(*args): return _mforms.TreeView_set_bool(*args)
    def get_string(*args): return _mforms.TreeView_get_string(*args)
    def get_int(*args): return _mforms.TreeView_get_int(*args)
    def get_long(*args): return _mforms.TreeView_get_long(*args)
    def get_check(*args): return _mforms.TreeView_get_check(*args)
    def freeze_refresh(*args): return _mforms.TreeView_freeze_refresh(*args)
    def thaw_refresh(*args): return _mforms.TreeView_thaw_refresh(*args)
    def signal_changed(*args): return _mforms.TreeView_signal_changed(*args)
    def signal_row_activated(*args): return _mforms.TreeView_signal_row_activated(*args)
    def set_cell_edit_handler(*args): return _mforms.TreeView_set_cell_edit_handler(*args)
    def set_context_menu(*args): return _mforms.TreeView_set_context_menu(*args)
    def get_context_menu(*args): return _mforms.TreeView_get_context_menu(*args)
    def add_activated_callback(*args): return _mforms.TreeView_add_activated_callback(*args)
    def call_activated_callback(*args): return _mforms.TreeView_call_activated_callback(*args)
    def add_changed_callback(*args): return _mforms.TreeView_add_changed_callback(*args)
    def call_changed_callback(*args): return _mforms.TreeView_call_changed_callback(*args)
    def set_cell_edited_callback(*args): return _mforms.TreeView_set_cell_edited_callback(*args)
    __swig_destroy__ = _mforms.delete_TreeView
    __del__ = lambda self : None;
TreeView_swigregister = _mforms.TreeView_swigregister
TreeView_swigregister(TreeView)

class Wizard(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wizard, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wizard, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Wizard(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Wizard
    __del__ = lambda self : None;
    def flush_events(*args): return _mforms.Wizard_flush_events(*args)
    def set_title(*args): return _mforms.Wizard_set_title(*args)
    def run(*args): return _mforms.Wizard_run(*args)
    def close(*args): return _mforms.Wizard_close(*args)
    def set_content(*args): return _mforms.Wizard_set_content(*args)
    def set_heading(*args): return _mforms.Wizard_set_heading(*args)
    def set_step_list(*args): return _mforms.Wizard_set_step_list(*args)
    def set_allow_cancel(*args): return _mforms.Wizard_set_allow_cancel(*args)
    def set_allow_back(*args): return _mforms.Wizard_set_allow_back(*args)
    def set_allow_next(*args): return _mforms.Wizard_set_allow_next(*args)
    def set_show_extra(*args): return _mforms.Wizard_set_show_extra(*args)
    def set_extra_caption(*args): return _mforms.Wizard_set_extra_caption(*args)
    def set_next_caption(*args): return _mforms.Wizard_set_next_caption(*args)
    def add_next_callback(*args): return _mforms.Wizard_add_next_callback(*args)
    def call_next_callback(*args): return _mforms.Wizard_call_next_callback(*args)
    def add_back_callback(*args): return _mforms.Wizard_add_back_callback(*args)
    def call_back_callback(*args): return _mforms.Wizard_call_back_callback(*args)
    def add_extra_callback(*args): return _mforms.Wizard_add_extra_callback(*args)
    def call_extra_callback(*args): return _mforms.Wizard_call_extra_callback(*args)
Wizard_swigregister = _mforms.Wizard_swigregister
Wizard_swigregister(Wizard)

Documents = _mforms.Documents
Desktop = _mforms.Desktop
ApplicationData = _mforms.ApplicationData
WinProgramFiles = _mforms.WinProgramFiles
WinProgramFilesX86 = _mforms.WinProgramFilesX86
SessionStorePasswordScheme = _mforms.SessionStorePasswordScheme
PersistentStorePasswordScheme = _mforms.PersistentStorePasswordScheme
ModifierNoModifier = _mforms.ModifierNoModifier
ModifierControl = _mforms.ModifierControl
ModifierShift = _mforms.ModifierShift
ModifierCommand = _mforms.ModifierCommand
ModifierAlt = _mforms.ModifierAlt
ResultOk = _mforms.ResultOk
ResultCancel = _mforms.ResultCancel
ResultOther = _mforms.ResultOther
DialogMessage = _mforms.DialogMessage
DialogError = _mforms.DialogError
DialogWarning = _mforms.DialogWarning
DialogQuery = _mforms.DialogQuery
DialogSuccess = _mforms.DialogSuccess
class Utilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Utilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Utilities, name)
    __repr__ = _swig_repr
    __swig_getmethods__["show_message"] = lambda x: _mforms.Utilities_show_message
    if _newclass:show_message = staticmethod(_mforms.Utilities_show_message)
    __swig_getmethods__["show_error"] = lambda x: _mforms.Utilities_show_error
    if _newclass:show_error = staticmethod(_mforms.Utilities_show_error)
    __swig_getmethods__["show_warning"] = lambda x: _mforms.Utilities_show_warning
    if _newclass:show_warning = staticmethod(_mforms.Utilities_show_warning)
    __swig_getmethods__["show_message_and_remember"] = lambda x: _mforms.Utilities_show_message_and_remember
    if _newclass:show_message_and_remember = staticmethod(_mforms.Utilities_show_message_and_remember)
    __swig_getmethods__["forget_message_answers"] = lambda x: _mforms.Utilities_forget_message_answers
    if _newclass:forget_message_answers = staticmethod(_mforms.Utilities_forget_message_answers)
    __swig_getmethods__["set_message_answers_storage_path"] = lambda x: _mforms.Utilities_set_message_answers_storage_path
    if _newclass:set_message_answers_storage_path = staticmethod(_mforms.Utilities_set_message_answers_storage_path)
    __swig_getmethods__["show_wait_message"] = lambda x: _mforms.Utilities_show_wait_message
    if _newclass:show_wait_message = staticmethod(_mforms.Utilities_show_wait_message)
    __swig_getmethods__["hide_wait_message"] = lambda x: _mforms.Utilities_hide_wait_message
    if _newclass:hide_wait_message = staticmethod(_mforms.Utilities_hide_wait_message)
    __swig_getmethods__["run_cancelable_task"] = lambda x: _mforms.Utilities_run_cancelable_task
    if _newclass:run_cancelable_task = staticmethod(_mforms.Utilities_run_cancelable_task)
    __swig_getmethods__["request_input"] = lambda x: _mforms.Utilities_request_input
    if _newclass:request_input = staticmethod(_mforms.Utilities_request_input)
    __swig_getmethods__["ask_for_password_check_store"] = lambda x: _mforms.Utilities_ask_for_password_check_store
    if _newclass:ask_for_password_check_store = staticmethod(_mforms.Utilities_ask_for_password_check_store)
    __swig_getmethods__["ask_for_password"] = lambda x: _mforms.Utilities_ask_for_password
    if _newclass:ask_for_password = staticmethod(_mforms.Utilities_ask_for_password)
    __swig_getmethods__["find_or_ask_for_password"] = lambda x: _mforms.Utilities_find_or_ask_for_password
    if _newclass:find_or_ask_for_password = staticmethod(_mforms.Utilities_find_or_ask_for_password)
    __swig_getmethods__["store_password"] = lambda x: _mforms.Utilities_store_password
    if _newclass:store_password = staticmethod(_mforms.Utilities_store_password)
    __swig_getmethods__["find_password"] = lambda x: _mforms.Utilities_find_password
    if _newclass:find_password = staticmethod(_mforms.Utilities_find_password)
    __swig_getmethods__["forget_password"] = lambda x: _mforms.Utilities_forget_password
    if _newclass:forget_password = staticmethod(_mforms.Utilities_forget_password)
    __swig_getmethods__["set_clipboard_text"] = lambda x: _mforms.Utilities_set_clipboard_text
    if _newclass:set_clipboard_text = staticmethod(_mforms.Utilities_set_clipboard_text)
    __swig_getmethods__["get_clipboard_text"] = lambda x: _mforms.Utilities_get_clipboard_text
    if _newclass:get_clipboard_text = staticmethod(_mforms.Utilities_get_clipboard_text)
    __swig_getmethods__["get_special_folder"] = lambda x: _mforms.Utilities_get_special_folder
    if _newclass:get_special_folder = staticmethod(_mforms.Utilities_get_special_folder)
    __swig_getmethods__["open_url"] = lambda x: _mforms.Utilities_open_url
    if _newclass:open_url = staticmethod(_mforms.Utilities_open_url)
    __swig_getmethods__["move_to_trash"] = lambda x: _mforms.Utilities_move_to_trash
    if _newclass:move_to_trash = staticmethod(_mforms.Utilities_move_to_trash)
    __swig_getmethods__["add_end_ok_cancel_buttons"] = lambda x: _mforms.Utilities_add_end_ok_cancel_buttons
    if _newclass:add_end_ok_cancel_buttons = staticmethod(_mforms.Utilities_add_end_ok_cancel_buttons)
    __swig_getmethods__["load_icon"] = lambda x: _mforms.Utilities_load_icon
    if _newclass:load_icon = staticmethod(_mforms.Utilities_load_icon)
    __swig_getmethods__["shorten_string"] = lambda x: _mforms.Utilities_shorten_string
    if _newclass:shorten_string = staticmethod(_mforms.Utilities_shorten_string)
    __swig_getmethods__["perform_from_main_thread"] = lambda x: _mforms.Utilities_perform_from_main_thread
    if _newclass:perform_from_main_thread = staticmethod(_mforms.Utilities_perform_from_main_thread)
    __swig_getmethods__["in_main_thread"] = lambda x: _mforms.Utilities_in_main_thread
    if _newclass:in_main_thread = staticmethod(_mforms.Utilities_in_main_thread)
    __swig_getmethods__["add_timeout"] = lambda x: _mforms.Utilities_add_timeout
    if _newclass:add_timeout = staticmethod(_mforms.Utilities_add_timeout)
    def __init__(self, *args): 
        this = _mforms.new_Utilities(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Utilities
    __del__ = lambda self : None;
Utilities_swigregister = _mforms.Utilities_swigregister
Utilities_swigregister(Utilities)
Utilities_show_message = _mforms.Utilities_show_message
Utilities_show_error = _mforms.Utilities_show_error
Utilities_show_warning = _mforms.Utilities_show_warning
Utilities_show_message_and_remember = _mforms.Utilities_show_message_and_remember
Utilities_forget_message_answers = _mforms.Utilities_forget_message_answers
Utilities_set_message_answers_storage_path = _mforms.Utilities_set_message_answers_storage_path
Utilities_show_wait_message = _mforms.Utilities_show_wait_message
Utilities_hide_wait_message = _mforms.Utilities_hide_wait_message
Utilities_run_cancelable_task = _mforms.Utilities_run_cancelable_task
Utilities_request_input = _mforms.Utilities_request_input
Utilities_ask_for_password_check_store = _mforms.Utilities_ask_for_password_check_store
Utilities_ask_for_password = _mforms.Utilities_ask_for_password
Utilities_find_or_ask_for_password = _mforms.Utilities_find_or_ask_for_password
Utilities_store_password = _mforms.Utilities_store_password
Utilities_find_password = _mforms.Utilities_find_password
Utilities_forget_password = _mforms.Utilities_forget_password
Utilities_set_clipboard_text = _mforms.Utilities_set_clipboard_text
Utilities_get_clipboard_text = _mforms.Utilities_get_clipboard_text
Utilities_get_special_folder = _mforms.Utilities_get_special_folder
Utilities_open_url = _mforms.Utilities_open_url
Utilities_move_to_trash = _mforms.Utilities_move_to_trash
Utilities_add_end_ok_cancel_buttons = _mforms.Utilities_add_end_ok_cancel_buttons
Utilities_load_icon = _mforms.Utilities_load_icon
Utilities_shorten_string = _mforms.Utilities_shorten_string
Utilities_perform_from_main_thread = _mforms.Utilities_perform_from_main_thread
Utilities_in_main_thread = _mforms.Utilities_in_main_thread
Utilities_add_timeout = _mforms.Utilities_add_timeout

class AppView(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppView, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_AppView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_AppView
    __del__ = lambda self : None;
    def set_title(*args): return _mforms.AppView_set_title(*args)
    def set_identifier(*args): return _mforms.AppView_set_identifier(*args)
    def identifier(*args): return _mforms.AppView_identifier(*args)
    def get_menubar(*args): return _mforms.AppView_get_menubar(*args)
    def set_menubar(*args): return _mforms.AppView_set_menubar(*args)
    def get_toolbar(*args): return _mforms.AppView_get_toolbar(*args)
    def set_toolbar(*args): return _mforms.AppView_set_toolbar(*args)
    def on_close(*args): return _mforms.AppView_on_close(*args)
AppView_swigregister = _mforms.AppView_swigregister
AppView_swigregister(AppView)

SystemHighlight = _mforms.SystemHighlight
class App(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, App, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, App, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _mforms.App_get
    if _newclass:get = staticmethod(_mforms.App_get)
    def dock_view(*args): return _mforms.App_dock_view(*args)
    def select_view(*args): return _mforms.App_select_view(*args)
    def undock_view(*args): return _mforms.App_undock_view(*args)
    def set_view_title(*args): return _mforms.App_set_view_title(*args)
    def set_status_text(*args): return _mforms.App_set_status_text(*args)
    def get_resource_path(*args): return _mforms.App_get_resource_path(*args)
    def get_user_data_folder(*args): return _mforms.App_get_user_data_folder(*args)
    def get_bounds(*args): return _mforms.App_get_bounds(*args)
    def enter_event_loop(*args): return _mforms.App_enter_event_loop(*args)
    def exit_event_loop(*args): return _mforms.App_exit_event_loop(*args)
    def set_view_for_identifier(*args): return _mforms.App_set_view_for_identifier(*args)
    def get_view_for_identifier(*args): return _mforms.App_get_view_for_identifier(*args)
    __swig_getmethods__["begin_thread_loop"] = lambda x: _mforms.App_begin_thread_loop
    if _newclass:begin_thread_loop = staticmethod(_mforms.App_begin_thread_loop)
    __swig_getmethods__["end_thread_loop"] = lambda x: _mforms.App_end_thread_loop
    if _newclass:end_thread_loop = staticmethod(_mforms.App_end_thread_loop)
    def get_system_color(*args): return _mforms.App_get_system_color(*args)
    __swig_destroy__ = _mforms.delete_App
    __del__ = lambda self : None;
App_swigregister = _mforms.App_swigregister
App_swigregister(App)
App_get = _mforms.App_get
App_begin_thread_loop = _mforms.App_begin_thread_loop
App_end_thread_loop = _mforms.App_end_thread_loop

class DrawBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_DrawBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_layout_dirty(*args): return _mforms.DrawBox_set_layout_dirty(*args)
    def set_needs_repaint(*args): return _mforms.DrawBox_set_needs_repaint(*args)
    def get_layout_size(*args): return _mforms.DrawBox_get_layout_size(*args)
    __swig_destroy__ = _mforms.delete_DrawBox
    __del__ = lambda self : None;
DrawBox_swigregister = _mforms.DrawBox_swigregister
DrawBox_swigregister(DrawBox)

TabBackground = _mforms.TabBackground
TabMainCaption = _mforms.TabMainCaption
TabSubCaption = _mforms.TabSubCaption
TabLineColor = _mforms.TabLineColor
class TabSwitcher(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabSwitcher, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabSwitcher, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TabSwitcher(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TabSwitcher
    __del__ = lambda self : None;
    def attach_to_tabview(*args): return _mforms.TabSwitcher_attach_to_tabview(*args)
    def add_item(*args): return _mforms.TabSwitcher_add_item(*args)
    def set_icon(*args): return _mforms.TabSwitcher_set_icon(*args)
    def set_color(*args): return _mforms.TabSwitcher_set_color(*args)
    def set_selected(*args): return _mforms.TabSwitcher_set_selected(*args)
    def get_selected(*args): return _mforms.TabSwitcher_get_selected(*args)
    def set_needs_relayout(*args): return _mforms.TabSwitcher_set_needs_relayout(*args)
    def add_changed_callback(*args): return _mforms.TabSwitcher_add_changed_callback(*args)
    def call_changed_callback(*args): return _mforms.TabSwitcher_call_changed_callback(*args)
TabSwitcher_swigregister = _mforms.TabSwitcher_swigregister
TabSwitcher_swigregister(TabSwitcher)

class SectionBox(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SectionBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_SectionBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_SectionBox
    __del__ = lambda self : None;
    def set_content(*args): return _mforms.SectionBox_set_content(*args)
    def toggle(*args): return _mforms.SectionBox_toggle(*args)
    def set_expanded(*args): return _mforms.SectionBox_set_expanded(*args)
    def get_expanded(*args): return _mforms.SectionBox_get_expanded(*args)
SectionBox_swigregister = _mforms.SectionBox_swigregister
SectionBox_swigregister(SectionBox)

class BaseWidget(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseWidget, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_BaseWidget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_BaseWidget
    __del__ = lambda self : None;
    def enable_auto_scale(*args): return _mforms.BaseWidget_enable_auto_scale(*args)
    def get_upper_range(*args): return _mforms.BaseWidget_get_upper_range(*args)
    def set_value_range(*args): return _mforms.BaseWidget_set_value_range(*args)
    def set_thresholds(*args): return _mforms.BaseWidget_set_thresholds(*args)
    def set_description(*args): return _mforms.BaseWidget_set_description(*args)
BaseWidget_swigregister = _mforms.BaseWidget_swigregister
BaseWidget_swigregister(BaseWidget)

class WidgetSeparator(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetSeparator, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetSeparator, name)
    __repr__ = _swig_repr
    def repaint(*args): return _mforms.WidgetSeparator_repaint(*args)
    def __init__(self, *args): 
        this = _mforms.new_WidgetSeparator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_WidgetSeparator
    __del__ = lambda self : None;
WidgetSeparator_swigregister = _mforms.WidgetSeparator_swigregister
WidgetSeparator_swigregister(WidgetSeparator)

class WidgetContainer(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_WidgetContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_WidgetContainer
    __del__ = lambda self : None;
    def add_widget(*args): return _mforms.WidgetContainer_add_widget(*args)
    def set_title(*args): return _mforms.WidgetContainer_set_title(*args)
WidgetContainer_swigregister = _mforms.WidgetContainer_swigregister
WidgetContainer_swigregister(WidgetContainer)

HEARTBEAT_DATA_SIZE = _mforms.HEARTBEAT_DATA_SIZE
class HeartbeatWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeartbeatWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeartbeatWidget, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_HeartbeatWidget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_HeartbeatWidget
    __del__ = lambda self : None;
    def set_value(*args): return _mforms.HeartbeatWidget_set_value(*args)
HeartbeatWidget_swigregister = _mforms.HeartbeatWidget_swigregister
HeartbeatWidget_swigregister(HeartbeatWidget)

class ServerInfoWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInfoWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInfoWidget, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ServerInfoWidget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_ServerInfoWidget
    __del__ = lambda self : None;
    def set_server_info(*args): return _mforms.ServerInfoWidget_set_server_info(*args)
    def set_server_status(*args): return _mforms.ServerInfoWidget_set_server_status(*args)
ServerInfoWidget_swigregister = _mforms.ServerInfoWidget_swigregister
ServerInfoWidget_swigregister(ServerInfoWidget)

class BarGraphWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarGraphWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarGraphWidget, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_BarGraphWidget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_BarGraphWidget
    __del__ = lambda self : None;
    def set_value(*args): return _mforms.BarGraphWidget_set_value(*args)
BarGraphWidget_swigregister = _mforms.BarGraphWidget_swigregister
BarGraphWidget_swigregister(BarGraphWidget)

LINE_SERIES_DATA_SIZE = _mforms.LINE_SERIES_DATA_SIZE
class LineDiagramWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineDiagramWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineDiagramWidget, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_LineDiagramWidget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_LineDiagramWidget
    __del__ = lambda self : None;
    def set_value(*args): return _mforms.LineDiagramWidget_set_value(*args)
LineDiagramWidget_swigregister = _mforms.LineDiagramWidget_swigregister
LineDiagramWidget_swigregister(LineDiagramWidget)

class WebBrowser(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WebBrowser, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WebBrowser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_WebBrowser(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_html(*args): return _mforms.WebBrowser_set_html(*args)
    def navigate(*args): return _mforms.WebBrowser_navigate(*args)
    def get_document_title(*args): return _mforms.WebBrowser_get_document_title(*args)
    def set_link_click_handler(*args): return _mforms.WebBrowser_set_link_click_handler(*args)
    def add_loaded_callback(*args): return _mforms.WebBrowser_add_loaded_callback(*args)
    def call_loaded_callback(*args): return _mforms.WebBrowser_call_loaded_callback(*args)
    __swig_destroy__ = _mforms.delete_WebBrowser
    __del__ = lambda self : None;
WebBrowser_swigregister = _mforms.WebBrowser_swigregister
WebBrowser_swigregister(WebBrowser)

PopupPlain = _mforms.PopupPlain
PopupBezel = _mforms.PopupBezel
class Popup(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Popup, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Popup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Popup(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_needs_repaint(*args): return _mforms.Popup_set_needs_repaint(*args)
    def set_size(*args): return _mforms.Popup_set_size(*args)
    def show(*args): return _mforms.Popup_show(*args)
    def get_content_rect(*args): return _mforms.Popup_get_content_rect(*args)
    def set_modal_result(*args): return _mforms.Popup_set_modal_result(*args)
    __swig_destroy__ = _mforms.delete_Popup
    __del__ = lambda self : None;
Popup_swigregister = _mforms.Popup_swigregister
Popup_swigregister(Popup)

class Menu(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Menu, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Menu, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Menu(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _mforms.Menu_empty(*args)
    def clear(*args): return _mforms.Menu_clear(*args)
    def remove_item(*args): return _mforms.Menu_remove_item(*args)
    def add_item(*args): return _mforms.Menu_add_item(*args)
    def add_separator(*args): return _mforms.Menu_add_separator(*args)
    def add_submenu(*args): return _mforms.Menu_add_submenu(*args)
    def add_items_from_list(*args): return _mforms.Menu_add_items_from_list(*args)
    def set_item_enabled(*args): return _mforms.Menu_set_item_enabled(*args)
    def set_handler(*args): return _mforms.Menu_set_handler(*args)
    def popup_at(*args): return _mforms.Menu_popup_at(*args)
    def popup(*args): return _mforms.Menu_popup(*args)
    def handle_action(*args): return _mforms.Menu_handle_action(*args)
    def get_item_index(*args): return _mforms.Menu_get_item_index(*args)
    def signal_will_show(*args): return _mforms.Menu_signal_will_show(*args)
    __swig_destroy__ = _mforms.delete_Menu
    __del__ = lambda self : None;
Menu_swigregister = _mforms.Menu_swigregister
Menu_swigregister(Menu)

LanguageNone = _mforms.LanguageNone
LanguageMySQL = _mforms.LanguageMySQL
LanguageCpp = _mforms.LanguageCpp
LanguageLua = _mforms.LanguageLua
LanguagePython = _mforms.LanguagePython
LineMarkupNone = _mforms.LineMarkupNone
LineMarkupBreakpoint = _mforms.LineMarkupBreakpoint
LineMarkupBreakpointHit = _mforms.LineMarkupBreakpointHit
LineMarkupError = _mforms.LineMarkupError
LineMarkupStatement = _mforms.LineMarkupStatement
LineMarkupCurrent = _mforms.LineMarkupCurrent
LineMarkupAll = _mforms.LineMarkupAll
FeatureNone = _mforms.FeatureNone
FeatureWrapText = _mforms.FeatureWrapText
FeatureAll = _mforms.FeatureAll
class CodeEditor(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeEditor, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CodeEditor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_CodeEditor(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_text(*args): return _mforms.CodeEditor_set_text(*args)
    def set_value(*args): return _mforms.CodeEditor_set_value(*args)
    def get_text(*args): return _mforms.CodeEditor_get_text(*args)
    def get_string_value(*args): return _mforms.CodeEditor_get_string_value(*args)
    def set_selection(*args): return _mforms.CodeEditor_set_selection(*args)
    def get_selection(*args): return _mforms.CodeEditor_get_selection(*args)
    def get_range_of_line(*args): return _mforms.CodeEditor_get_range_of_line(*args)
    def set_language(*args): return _mforms.CodeEditor_set_language(*args)
    def set_read_only(*args): return _mforms.CodeEditor_set_read_only(*args)
    def show_markup(*args): return _mforms.CodeEditor_show_markup(*args)
    def remove_markup(*args): return _mforms.CodeEditor_remove_markup(*args)
    def line_count(*args): return _mforms.CodeEditor_line_count(*args)
    def set_font(*args): return _mforms.CodeEditor_set_font(*args)
    def show_gutter(*args): return _mforms.CodeEditor_show_gutter(*args)
    def set_features(*args): return _mforms.CodeEditor_set_features(*args)
    __swig_destroy__ = _mforms.delete_CodeEditor
    __del__ = lambda self : None;
CodeEditor_swigregister = _mforms.CodeEditor_swigregister
CodeEditor_swigregister(CodeEditor)
__or__ = _mforms.__or__

class TaskSidebar(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskSidebar, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskSidebar, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _mforms.TaskSidebar_create
    if _newclass:create = staticmethod(_mforms.TaskSidebar_create)
    def refresh_model(*args): return _mforms.TaskSidebar_refresh_model(*args)
    def set_schema_model(*args): return _mforms.TaskSidebar_set_schema_model(*args)
    def set_filtered_schema_model(*args): return _mforms.TaskSidebar_set_filtered_schema_model(*args)
    def get_schema_tree(*args): return _mforms.TaskSidebar_get_schema_tree(*args)
    def get_filter_entry(*args): return _mforms.TaskSidebar_get_filter_entry(*args)
    def add_section(*args): return _mforms.TaskSidebar_add_section(*args)
    def remove_section(*args): return _mforms.TaskSidebar_remove_section(*args)
    def add_section_entry(*args): return _mforms.TaskSidebar_add_section_entry(*args)
    def remove_section_entry(*args): return _mforms.TaskSidebar_remove_section_entry(*args)
    def set_collapse_states(*args): return _mforms.TaskSidebar_set_collapse_states(*args)
    def get_collapse_states(*args): return _mforms.TaskSidebar_get_collapse_states(*args)
    def clear_sections(*args): return _mforms.TaskSidebar_clear_sections(*args)
    def clear_section(*args): return _mforms.TaskSidebar_clear_section(*args)
    def set_selection_color(*args): return _mforms.TaskSidebar_set_selection_color(*args)
    def signal_filter_changed(*args): return _mforms.TaskSidebar_signal_filter_changed(*args)
    def expand_schema(*args): return _mforms.TaskSidebar_expand_schema(*args)
    def restore_expanded_nodes(*args): return _mforms.TaskSidebar_restore_expanded_nodes(*args)
    def select_entry(*args): return _mforms.TaskSidebar_select_entry(*args)
    def clear_selection(*args): return _mforms.TaskSidebar_clear_selection(*args)
    def on_section_command(*args): return _mforms.TaskSidebar_on_section_command(*args)
    __swig_getmethods__["register_factory"] = lambda x: _mforms.TaskSidebar_register_factory
    if _newclass:register_factory = staticmethod(_mforms.TaskSidebar_register_factory)
    def add_on_section_command_callback(*args): return _mforms.TaskSidebar_add_on_section_command_callback(*args)
    def call_on_section_command_callback(*args): return _mforms.TaskSidebar_call_on_section_command_callback(*args)
    __swig_destroy__ = _mforms.delete_TaskSidebar
    __del__ = lambda self : None;
TaskSidebar_swigregister = _mforms.TaskSidebar_swigregister
TaskSidebar_swigregister(TaskSidebar)
TaskSidebar_create = _mforms.TaskSidebar_create
TaskSidebar_register_factory = _mforms.TaskSidebar_register_factory

CellInvalid = _mforms.CellInvalid
CellText = _mforms.CellText
CellBool = _mforms.CellBool
CellEnum = _mforms.CellEnum
CellHeader = _mforms.CellHeader
CellGroupHeader = _mforms.CellGroupHeader
CellsReadable = _mforms.CellsReadable
CellsEditable = _mforms.CellsEditable
ShadeNone = _mforms.ShadeNone
ShadeFind = _mforms.ShadeFind
ShadeFilter = _mforms.ShadeFilter
NotVisible = _mforms.NotVisible
ShowAlways = _mforms.ShowAlways
ShowOnHover = _mforms.ShowOnHover
IconLeft = _mforms.IconLeft
IconRight = _mforms.IconRight
class SimpleGridPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleGridPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleGridPath, name)
    __repr__ = _swig_repr
    def size(*args): return _mforms.SimpleGridPath_size(*args)
    def append(*args): return _mforms.SimpleGridPath_append(*args)
    def index(*args): return _mforms.SimpleGridPath_index(*args)
    def set_index(*args): return _mforms.SimpleGridPath_set_index(*args)
    def __eq__(*args): return _mforms.SimpleGridPath___eq__(*args)
    def __init__(self, *args): 
        this = _mforms.new_SimpleGridPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_SimpleGridPath
    __del__ = lambda self : None;
SimpleGridPath_swigregister = _mforms.SimpleGridPath_swigregister
SimpleGridPath_swigregister(SimpleGridPath)

class SimpleGrid(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_SimpleGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_column(*args): return _mforms.SimpleGrid_add_column(*args)
    def clear(*args): return _mforms.SimpleGrid_clear(*args)
    def append_header(*args): return _mforms.SimpleGrid_append_header(*args)
    def append_row(*args): return _mforms.SimpleGrid_append_row(*args)
    def set_str_value(*args): return _mforms.SimpleGrid_set_str_value(*args)
    def set_bool_value(*args): return _mforms.SimpleGrid_set_bool_value(*args)
    def get_value(*args): return _mforms.SimpleGrid_get_value(*args)
    def set_cell_type(*args): return _mforms.SimpleGrid_set_cell_type(*args)
    def set_fg(*args): return _mforms.SimpleGrid_set_fg(*args)
    def set_bg(*args): return _mforms.SimpleGrid_set_bg(*args)
    def set_underline(*args): return _mforms.SimpleGrid_set_underline(*args)
    def set_enum(*args): return _mforms.SimpleGrid_set_enum(*args)
    def shade(*args): return _mforms.SimpleGrid_shade(*args)
    def unshade(*args): return _mforms.SimpleGrid_unshade(*args)
    def has_shade(*args): return _mforms.SimpleGrid_has_shade(*args)
    def scroll_to_row(*args): return _mforms.SimpleGrid_scroll_to_row(*args)
    def set_row_tag(*args): return _mforms.SimpleGrid_set_row_tag(*args)
    def get_row_tag(*args): return _mforms.SimpleGrid_get_row_tag(*args)
    def set_row_caption(*args): return _mforms.SimpleGrid_set_row_caption(*args)
    def get_row_caption(*args): return _mforms.SimpleGrid_get_row_caption(*args)
    def set_action_icon(*args): return _mforms.SimpleGrid_set_action_icon(*args)
    def add_content_edited_callback(*args): return _mforms.SimpleGrid_add_content_edited_callback(*args)
    def add_ro_content_clicked_callback(*args): return _mforms.SimpleGrid_add_ro_content_clicked_callback(*args)
    def add_content_action_callback(*args): return _mforms.SimpleGrid_add_content_action_callback(*args)
    __swig_destroy__ = _mforms.delete_SimpleGrid
    __del__ = lambda self : None;
SimpleGrid_swigregister = _mforms.SimpleGrid_swigregister
SimpleGrid_swigregister(SimpleGrid)

class HyperText(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperText, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_HyperText(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_markup_text(*args): return _mforms.HyperText_set_markup_text(*args)
    def handle_url_click(*args): return _mforms.HyperText_handle_url_click(*args)
    def add_link_click_callback(*args): return _mforms.HyperText_add_link_click_callback(*args)
    def call_link_click_callback(*args): return _mforms.HyperText_call_link_click_callback(*args)
    __swig_destroy__ = _mforms.delete_HyperText
    __del__ = lambda self : None;
HyperText_swigregister = _mforms.HyperText_swigregister
HyperText_swigregister(HyperText)



